// <auto-generated />
using System;
using ExerciseTrackingAnalytics.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ExerciseTrackingAnalytics.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ExerciseTrackingAnalytics.Models.FoodDiaryEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<long>("FoodId")
                        .HasColumnType("bigint");

                    b.Property<string>("Meal")
                        .IsRequired()
                        .HasColumnType("VARCHAR(32)");

                    b.Property<decimal>("NumServings")
                        .HasColumnType("numeric");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RecordInsertDateUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("now() AT TIME ZONE 'UTC'");

                    b.Property<DateTime?>("RecordUpdateDateUtc")
                        .HasColumnType("TIMESTAMP");

                    b.Property<TimeSpan>("TimeOfDay")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("OwnerUserId", "Date");

                    b.ToTable("FoodDiaryEntries");
                });

            modelBuilder.Entity("ExerciseTrackingAnalytics.Models.Identity.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("ExerciseTrackingAnalytics.Models.Identity.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("ExerciseTrackingAnalytics.Models.Identity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("EmailConfirmedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PhoneConfirmedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ExerciseTrackingAnalytics.Models.Identity.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("ExerciseTrackingAnalytics.Models.Identity.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("ExerciseTrackingAnalytics.Models.Identity.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("ExerciseTrackingAnalytics.Models.Identity.ApplicationUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ExerciseTrackingAnalytics.Models.MasterFood", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("AddedSugarsGrams")
                        .HasColumnType("numeric");

                    b.Property<string>("Barcode")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("BarcodeNormalized")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<decimal?>("BiotinMicrograms")
                        .HasColumnType("numeric");

                    b.Property<string>("BrandName")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<decimal?>("CalciumMilligrams")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Calories")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ChlorideMilligrams")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("CholesterolMilligrams")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("CholineMicrograms")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ChromiumMicrograms")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("CopperMicrograms")
                        .HasColumnType("numeric");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeactivatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeactivatedDateUtc")
                        .HasColumnType("TIMESTAMP");

                    b.Property<decimal?>("DietaryFiberGrams")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("FolateMicrograms")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("IodineMicrograms")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("IronMilligrams")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsShared")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("MagnesiumMilligrams")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ManganeseMilligrams")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MolybdenumMicrograms")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MonoUnsaturatedFatGrams")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("NameNormalized")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<decimal?>("NiacinMicrograms")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("OwnerUserId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("PantothenicAcidMicrograms")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PhosphorusMilligrams")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PolyUnsaturatedFatGrams")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PotassiumMilligrams")
                        .HasColumnType("numeric");

                    b.Property<long?>("PredecessorId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("ProteinGrams")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("RecordInsertDateUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("now() AT TIME ZONE 'UTC'");

                    b.Property<decimal?>("RiboflavinMicrograms")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("SaturatedFatGrams")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("SeleniumMicrograms")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ServingSize")
                        .HasColumnType("numeric");

                    b.Property<string>("ServingSizeUnit")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<decimal?>("SodiumMilligrams")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ThiaminMicrograms")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TotalCarbohydratesGrams")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TotalFatGrams")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TotalSugarsGrams")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TransFatGrams")
                        .HasColumnType("numeric");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.Property<decimal?>("VitaminA_Micrograms")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("VitaminB12_Micrograms")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("VitaminB6_Micrograms")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("VitaminC_Micrograms")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("VitaminD_Micrograms")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("VitaminE_Micrograms")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("VitaminK_Micrograms")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("ZincMilligrams")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BarcodeNormalized");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DeactivatedByUserId");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("PredecessorId");

                    b.HasIndex("NameNormalized", "Version")
                        .IsUnique()
                        .HasFilter("\"OwnerUserId\" IS NULL");

                    b.HasIndex("NameNormalized", "Version", "OwnerUserId")
                        .IsUnique()
                        .HasFilter("\"OwnerUserId\" IS NOT NULL");

                    b.ToTable("MasterFoods");
                });

            modelBuilder.Entity("ExerciseTrackingAnalytics.Models.UserActivity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Calories")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DistanceInMeters")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DistanceInMiles")
                        .HasColumnType("numeric");

                    b.Property<string>("DistanceOriginalUnit")
                        .IsRequired()
                        .HasColumnType("VARCHAR(32)");

                    b.Property<int>("ElapsedTimeInSeconds")
                        .HasColumnType("integer");

                    b.Property<string>("ExternalApp")
                        .IsRequired()
                        .HasColumnType("VARCHAR(128)");

                    b.Property<long>("ExternalAppActivityId")
                        .HasColumnType("bigint");

                    b.Property<int>("MovingTimeInSeconds")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("RecordInsertDateUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("now() AT TIME ZONE 'UTC'");

                    b.Property<string>("SportType")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("StartDateUtc")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<decimal?>("TotalElevationGainInMeters")
                        .HasColumnType("numeric");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("ExternalApp", "ExternalAppActivityId")
                        .IsUnique();

                    b.ToTable("UserActivities");
                });

            modelBuilder.Entity("ExerciseTrackingAnalytics.Models.FoodDiaryEntry", b =>
                {
                    b.HasOne("ExerciseTrackingAnalytics.Models.MasterFood", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExerciseTrackingAnalytics.Models.Identity.ApplicationUser", "OwnerUser")
                        .WithMany()
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("OwnerUser");
                });

            modelBuilder.Entity("ExerciseTrackingAnalytics.Models.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasOne("ExerciseTrackingAnalytics.Models.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExerciseTrackingAnalytics.Models.Identity.ApplicationUserClaim", b =>
                {
                    b.HasOne("ExerciseTrackingAnalytics.Models.Identity.ApplicationUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExerciseTrackingAnalytics.Models.Identity.ApplicationUserLogin", b =>
                {
                    b.HasOne("ExerciseTrackingAnalytics.Models.Identity.ApplicationUser", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExerciseTrackingAnalytics.Models.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("ExerciseTrackingAnalytics.Models.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExerciseTrackingAnalytics.Models.Identity.ApplicationUser", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExerciseTrackingAnalytics.Models.Identity.ApplicationUserToken", b =>
                {
                    b.HasOne("ExerciseTrackingAnalytics.Models.Identity.ApplicationUser", null)
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExerciseTrackingAnalytics.Models.MasterFood", b =>
                {
                    b.HasOne("ExerciseTrackingAnalytics.Models.Identity.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExerciseTrackingAnalytics.Models.Identity.ApplicationUser", "DeactivatedByUser")
                        .WithMany()
                        .HasForeignKey("DeactivatedByUserId");

                    b.HasOne("ExerciseTrackingAnalytics.Models.Identity.ApplicationUser", "OwnerUser")
                        .WithMany()
                        .HasForeignKey("OwnerUserId");

                    b.HasOne("ExerciseTrackingAnalytics.Models.MasterFood", "Predecessor")
                        .WithMany()
                        .HasForeignKey("PredecessorId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeactivatedByUser");

                    b.Navigation("OwnerUser");

                    b.Navigation("Predecessor");
                });

            modelBuilder.Entity("ExerciseTrackingAnalytics.Models.UserActivity", b =>
                {
                    b.HasOne("ExerciseTrackingAnalytics.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExerciseTrackingAnalytics.Models.Identity.ApplicationUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Tokens");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
