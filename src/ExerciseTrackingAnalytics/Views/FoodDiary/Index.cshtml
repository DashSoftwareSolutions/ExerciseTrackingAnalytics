@using Microsoft.AspNetCore.Identity
@using ExerciseTrackingAnalytics.Models
@using ExerciseTrackingAnalytics.Models.Identity
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

@{
    var date = ViewBag.Date as DateOnly?;
    date ??= DateOnly.FromDateTime(DateTime.Today);

    ViewData["Title"] = $"Food Diary - {date:D}";
}

<div class="row mb-4">
    <div class="col d-flex flex-row justify-content-center align-items-center">
        <div class="me-5">
            <i id="food-diary_page--back_one_day_button" class="bi bi-chevron-left fw-bold" style="font-size: 2rem; cursor: pointer;"></i>
        </div>
        <h3 class="display-6 fw-bold food-diary_page--date-header"></h3>
        <div class="ms-5">
            <i id="food_diary_page--fwd_one_day_button" class="bi bi-chevron-right fw-bold" style="font-size: 2rem;"></i>
        </div>
    </div>
</div>

@* Loading Spinner while we're fetching the data *@
<div id="food_diary_page--loading_spinner" class="align-items-center justify-content-center" style="display: none !important; height: calc(100vh - 250px)">
    <div class="spinner-border" role="status" style="width: 5rem; height: 5rem;">
        <span class="visually-hidden">Loading...</span>
    </div>
</div>

<div id="food_diary_page--main_content_container" style="display: none">
    <div id="food_diary_page--action_buttons_container" class="d-flex flex-row justify-content-center">
        <button class="btn btn-primary me-2 food_diary_page--action_button" id="food_diary_page--add_food_button" data-bs-target="#food_diary_page--add_food_modal">Add Food</button>
        <button class="btn btn-dark food_diary_page--action_button" id="food_diary_page--sync-activities_button">Sync Activities</button>
    </div>
    <div id="food_diary_page--no_data_message" class="mt-5 text-center" data-bind="hidden: hasAnyData">
        You have no food and exercise data for this date.
    </div>
    <div id="food_diary_page--data_container" class="mt-5" data-bind="visible: hasAnyData">
        @* Calorie Summary *@
        <div class="card">
            <h5 class="card-header">
                Summary
            </h5>
            <div class="card-body d-flex flex-wrap justify-content-center text-center">
                <div class="food_diary_page--summary-stat">
                    <div class="text-secondary small">Food Calories</div>
                    <div class="fs-4 fw-bold" data-bind="text: foodCaloriesFormatted"></div>
                </div>
                <div class="food_diary_page--summary-stat">
                    <div class="text-secondary small">Exercise Calories</div>
                    <div class="fs-4 fw-bold" data-bind="text: exerciseCaloriesFormatted"></div>
                </div>
                <div class="food_diary_page--summary-stat">
                    <div class="text-secondary small">Net Calories</div>
                    <div class="fs-4 fw-bold" data-bind="text: netCaloriesFormatted"></div>
                </div>
            </div>
        </div>

        @* Breakfast *@
        <div class="card mt-5">
            <h5 class="card-header" role="button" data-bs-toggle="collapse" data-bs-target="#food_diary_page--breakfast_details_container" aria-expanded="true" aria-controls="food_diary_page--breakfast_details_container">
                Breakfast
            </h5>
            <div class="card-body collapse show" id="food_diary_page--breakfast_details_container">
                <div data-bind="hidden: breakfast.foods().length > 0">No food yet.</div>
                <div class="list-group list-group-flush" data-bind="visible: breakfast.foods().length > 0">
                    <div class="container list-group-item ps-0 pe-0 fw-bold">
                        <div class="row">
                            <div class="col-6 col-lg-9">Food</div>
                            <div class="col-3 col-lg-2">Time</div>
                            <div class="col-3 col-lg-1">Calories</div>
                        </div>
                    </div>
                    <!-- ko foreach: breakfast.foods -->
                    <div class="container list-group-item ps-0 pe-0">
                        <div class="row">
                            <div class="col-6 col-lg-9" data-bind="text: food"></div>
                            <div class="col-3 col-lg-2" data-bind="text: timeOfDayFormatted"></div>
                            <div class="col-3 col-lg-1 text-end" data-bind="text: caloriesFormatted"></div>
                        </div>
                    </div>
                    <!-- /ko -->
                </div>
            </div>
            <div class="card-footer d-flex">
                <div class="fw-bold me-auto">TOTAL CALORIES:</div>
                <div class="fw-bold" data-bind="text: breakfast.totalCaloriesFormatted"></div>
            </div>
        </div>

        @* Lunch *@
        <div class="card mt-5">
            <h5 class="card-header" role="button" data-bs-toggle="collapse" data-bs-target="#food_diary_page--lunch_details_container" aria-expanded="true" aria-controls="food_diary_page--lunch_details_container">
                Lunch
            </h5>
            <div class="card-body collapse show" id="food_diary_page--lunch_details_container">
                <div data-bind="hidden: lunch.foods().length > 0">No food yet.</div>
                <div class="list-group list-group-flush" data-bind="visible: lunch.foods().length > 0">
                    <div class="container list-group-item ps-0 pe-0 fw-bold">
                        <div class="row">
                            <div class="col-6 col-lg-9">Food</div>
                            <div class="col-3 col-lg-2">Time</div>
                            <div class="col-3 col-lg-1">Calories</div>
                        </div>
                    </div>
                    <!-- ko foreach: lunch.foods -->
                    <div class="container list-group-item ps-0 pe-0">
                        <div class="row">
                            <div class="col-6 col-lg-9" data-bind="text: food"></div>
                            <div class="col-3 col-lg-2" data-bind="text: timeOfDayFormatted"></div>
                            <div class="col-3 col-lg-1 text-end" data-bind="text: caloriesFormatted"></div>
                        </div>
                    </div>
                    <!-- /ko -->
                </div>
            </div>
            <div class="card-footer d-flex">
                <div class="fw-bold me-auto">TOTAL CALORIES:</div>
                <div class="fw-bold" data-bind="text: lunch.totalCaloriesFormatted"></div>
            </div>
        </div>

        @* Dinner *@
        <div class="card mt-5">
            <h5 class="card-header" role="button" data-bs-toggle="collapse" data-bs-target="#food_diary_page--dinner_details_container" aria-expanded="true" aria-controls="food_diary_page--lunch_details_container">
                Dinner
            </h5>
            <div class="card-body collapse show" id="food_diary_page--dinner_details_container">
                <div data-bind="hidden: dinner.foods().length > 0">No food yet.</div>
                <div class="list-group list-group-flush" data-bind="visible: dinner.foods().length > 0">
                    <div class="container list-group-item ps-0 pe-0 fw-bold">
                        <div class="row">
                            <div class="col-6 col-lg-9">Food</div>
                            <div class="col-3 col-lg-2">Time</div>
                            <div class="col-3 col-lg-1">Calories</div>
                        </div>
                    </div>
                    <!-- ko foreach: dinner.foods -->
                    <div class="container list-group-item ps-0 pe-0">
                        <div class="row">
                            <div class="col-6 col-lg-9" data-bind="text: food"></div>
                            <div class="col-3 col-lg-2" data-bind="text: timeOfDayFormatted"></div>
                            <div class="col-3 col-lg-1 text-end" data-bind="text: caloriesFormatted"></div>
                        </div>
                    </div>
                    <!-- /ko -->
                </div>
            </div>
            <div class="card-footer d-flex">
                <div class="fw-bold me-auto">TOTAL CALORIES:</div>
                <div class="fw-bold" data-bind="text: dinner.totalCaloriesFormatted"></div>
            </div>
        </div>

        @* Snacks *@
        <div class="card mt-5">
            <h5 class="card-header" role="button" data-bs-toggle="collapse" data-bs-target="#food_diary_page--snacks_details_container" aria-expanded="true" aria-controls="food_diary_page--lunch_details_container">
                Snacks
            </h5>
            <div class="card-body collapse show" id="food_diary_page--snacks_details_container">
                <div data-bind="hidden: snack.foods().length > 0">No food yet.</div>
                <div class="list-group list-group-flush" data-bind="visible: snack.foods().length > 0">
                    <div class="container list-group-item ps-0 pe-0 fw-bold">
                        <div class="row">
                            <div class="col-6 col-lg-9">Food</div>
                            <div class="col-3 col-lg-2">Time</div>
                            <div class="col-3 col-lg-1">Calories</div>
                        </div>
                    </div>
                    <!-- ko foreach: snack.foods -->
                    <div class="container list-group-item ps-0 pe-0">
                        <div class="row">
                            <div class="col-6 col-lg-9" data-bind="text: food"></div>
                            <div class="col-3 col-lg-2" data-bind="text: timeOfDayFormatted"></div>
                            <div class="col-3 col-lg-1 text-end" data-bind="text: caloriesFormatted"></div>
                        </div>
                    </div>
                    <!-- /ko -->
                </div>
            </div>
            <div class="card-footer d-flex">
                <div class="fw-bold me-auto">TOTAL CALORIES:</div>
                <div class="fw-bold" data-bind="text: snack.totalCaloriesFormatted"></div>
            </div>
        </div>

        @* Exercise *@
        <div class="card mt-5 mb-5">
            <h5 class="card-header" role="button" data-bs-toggle="collapse" data-bs-target="#food_diary_page--exercise_details_container" aria-expanded="true" aria-controls="food_diary_page--exercise_details_container">
                Exercise
            </h5>
            <div class="card-body collapse show" id="food_diary_page--exercise_details_container">
                <div data-bind="hidden: hasExerciseData">
                    No exercise yet.
                </div>
                <div class="list-group list-group-flush" data-bind="visible: hasExerciseData">
                    <div class="container list-group-item ps-0 pe-0 fw-bold">
                        <div class="row">
                            <div class="col">Activity</div>
                            <div class="col">Start</div>
                            <div class="col">Duration</div>
                            <div class="col">Distance</div>
                            <div class="col">Calories</div>
                        </div>
                    </div>
                    <!-- ko foreach: exerciseEntries -->
                    <div class="container list-group-item ps-0 pe-0">
                        <div class="row">
                            <div class="col" data-bind="text: sportType"></div>
                            <div class="col" data-bind="text: formattedLocalStartTime"></div>
                            <div class="col" data-bind="text: movingTime"></div>
                            <div class="col" data-bind="text: formattedDistance"></div>
                            <div class="col text-end" data-bind="text: formattedCalories"></div>
                        </div>
                    </div>
                    <!-- /ko -->
                </div>
            </div>
            <div class="card-footer d-flex">
                <div class="fw-bold me-auto">TOTAL CALORIES:</div>
                <div class="fw-bold" data-bind="text: exerciseCaloriesFormatted" />
            </div>
        </div>
    </div>
</div>

@* Add Food Modal *@
<div class="modal fade" id="food_diary_page--add_food_modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="food_diary_page--add_food_modal_title" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable" id="food_diary_page--add_food_modal_dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="food_diary_page--add_food_modal_title">Add Food</h1>
                <button type="button" class="btn-close" id="food_diary_page--add_food_modal_header_close_button" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <nav>
                    <ul class="nav nav-tabs" id="food_diary_page--add_food_modal_nav_tabs" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="food_diary_page--add_food_modal_search_tab" data-bs-toggle="tab" data-bs-target="#food_diary_page--add_food_modal_search_tab_pane" type="button" role="tab" aria-controls="food_diary_page--add_food_modal_search_tab_pane" aria-selected="true">Search Food Library</button>
                        </li>
                        <li class="nav-item">
                            <button class="nav-link" id="food_diary_page--add_food_modal_create_tab" data-bs-toggle="tab" data-bs-target="#food_diary_page--add_food_modal_create_tab_pane" type="button" role="tab" aria-controls="food_diary_page--add_food_modal_create_tab_pane" aria-selected="false">Create New Food</button>
                        </li>
                    </ul>
                </nav>
                <div class="border-bottom tab-content pt-2" id="food_diary_page--add_food_modal_tab_content" style="height: 350px">
                    <div class="tab-pane fade show active h-100" id="food_diary_page--add_food_modal_search_tab_pane" role="tabpanel" aria-labelledby="food_diary_page--add_food_modal_search_tab" tabindex="0">
                        <div class="d-flex align-items-centers">
                            <div class="btn-group" role="group" aria-label="Search Mode">
                                <input type="radio" class="btn-check" name="food_diary_page--add_food_modal_search_mode" id="food_diary_page--add_food_modal_search_mode-name" autocomplete="off" value="Name" data-bind="checked: addNewFoodEntry.search.mode">
                                <label class="btn btn-outline-primary" for="food_diary_page--add_food_modal_search_mode-name">Name</label>
                                <input type="radio" class="btn-check" name="food_diary_page--add_food_modal_search_mode" id="food_diary_page--add_food_modal_search_mode-barcode" autocomplete="off" value="Barcode" data-bind="checked: addNewFoodEntry.search.mode">
                                <label class="btn btn-outline-primary" for="food_diary_page--add_food_modal_search_mode-barcode">Barcode</label>
                            </div>
                            <div class="flex-fill ms-2">
                                <input class="form-control w-100" type="text" id="food_diary_page--add_food_modal_search_input" data-bind="value: addNewFoodEntry.search.query" />
                            </div>
                            <div class="ms-2">
                                <button type="button" class="btn btn-primary" id="food_diary_page--add_food_modal--search_button">
                                    <i class="bi bi-search fw-bold"></i>
                                </button>
                            </div>
                        </div>
                        <div id="food_diary_page--add_food_modal_search_loading_spinner" class="flex-row align-items-center justify-content-center h-100" style="margin-top: -34px; display: none !important;">
                            <div class="spinner-border" role="status" style="width: 5rem; height: 5rem;">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    </div>
                    <div class="tab-pane fade h-100" id="food_diary_page--add_food_modal_create_tab_pane" role="tabpanel" aria-labelledby="food_diary_page--add_food_modal_create_tab" tabindex="0">
                        ... CREATE ...
                    </div>
                </div>
                <div class="mt-3">
                    <div class="mb-3 container ps-0 pe-0">
                        <div class="row mb-2">
                            <div class="col">
                                <label for="food_diary_page--add_food_modal_num_servings_input" class="form-label"># of Servings</label>
                                <input type="number" class="form-control" id="food_diary_page--add_food_modal_num_servings_input" min="1" data-bind="value: addNewFoodEntry.numServings" />
                            </div>
                            <div class="col">
                                TOTAL CALORIES
                            </div>
                        </div>
                        <div class="row">
                            <div class="col">
                                <label for="food_diary_page--add_food_meal_select" class="form-label">Meal</label>
                                <select class="form-select" aria-label="Meal" data-bind="value: addNewFoodEntry.meal">
                                    <option selected>Select Meal</option>
                                    <option value="Breakfast">Breakfast</option>
                                    <option value="Lunch">Lunch</option>
                                    <option value="Dinner">Dinner</option>
                                    <option value="Snack">Snack</option>
                                </select>
                            </div>
                            <div class="col">
                                <label for="food_diary_page--add_food_modal_num_servings_input" class="form-label">Time of Day</label>
                                <input type="time" class="form-control" id="food_diary_page--add_food_modal_time_of_day_input" data-bind="value: addNewFoodEntry.timeOfDay" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal" id="food_diary_page--add_food_modal_footer_close_button">Cancel</button>
                <button type="button" class="btn btn-primary" id="food_diary_page--add_food_modal_save_button">Save changes</button>
            </div>
        </div>
    </div>
</div>

@* Sync Activities Modal *@
<partial name="_StravaActivitySyncModalPartial" />

@section Scripts {
    <script type="text/javascript">
        (function () {
            const pageDate = '@(date.Value.ToString("yyyy-MM-dd"))';
            const localToday = luxon.DateTime.local().toISODate();
            console.log('Page Date:', pageDate);
            console.log('Today:', localToday);

            const viewportWidth = window.innerWidth;
            console.log('Viewport Width:', viewportWidth);
            const dateHeader = document.querySelector('.food-diary_page--date-header');

            if (viewportWidth < 768) {
                dateHeader.textContent = luxon.DateTime.fromISO(pageDate).toLocaleString({ weekday: 'short', month: 'short', day: 'numeric', year: 'numeric' });
            } else {
                dateHeader.textContent = luxon.DateTime.fromISO(pageDate).toLocaleString({ weekday: 'long', month: 'long', day: 'numeric', year: 'numeric' });
            }

            const backOneDayIconButton = document.getElementById('food-diary_page--back_one_day_button');
            const fwdOneDayIconButton = document.getElementById('food_diary_page--fwd_one_day_button');

            if (pageDate === localToday) {
                fwdOneDayIconButton.classList.toggle('disabled');
            }

            backOneDayIconButton.addEventListener('click', (e) => {
                e.preventDefault();
                console.log('Back one day icon button clicked!');
                const targetDate = luxon.DateTime.fromISO(pageDate).minus({ days: 1 }).toISODate();
                window.location = `/food-diary/${targetDate}`;
            });

            fwdOneDayIconButton.addEventListener('click', (e) => {
                e.preventDefault();
                console.log('Forwward one day icon button clicked!');
                const targetDate = luxon.DateTime.fromISO(pageDate).plus({ days: 1 }).toISODate();
                window.location = `/food-diary/${targetDate}`;
            });

            const loadingSpinner = document.getElementById('food_diary_page--loading_spinner');
            const mainContentContainer = document.getElementById('food_diary_page--main_content_container');
            const searchFoodsLoadingSpinner = document.getElementById('food_diary_page--add_food_modal_search_loading_spinner');
            
            const userTimeZone = new luxon.SystemZone().name;
            console.log('User Time Zone:', userTimeZone);
            const locale = 'en-US'; // TODO: Make it user-selectable / settable by preferences, etc.
            const measurementSystem = 'UnitedStates'; // choices are UnitedStates and MetricSystem.  TODO: Make it so user can choose?
            const distanceUnit = 'mile'; // TODO: Make it data-driven and dependent on `measurementSystem`
            const calorieFormatter = new Intl.NumberFormat(locale, { minimumFractionDigits: 1, maximumFractionDigits: 1, roundingMode: 'floor' });
            const distanceFormatter = new Intl.NumberFormat(locale, { minimumFractionDigits: 2, maximumFractionDigits: 2, roundingMode: 'floor', style: 'unit', unit: distanceUnit });

            // Define Knockout View Model
            function FoodDiaryViewModel() {
                // Top level stats
                this.exerciseCalories = ko.observable(0);
                this.exerciseCaloriesFormatted = ko.computed(() => calorieFormatter.format(this.exerciseCalories()));
                this.foodCalories = ko.observable(0);
                this.foodCaloriesFormatted = ko.computed(() => calorieFormatter.format(this.foodCalories()));
                this.netCalories = ko.observable(0);
                this.netCaloriesFormatted = ko.computed(() => calorieFormatter.format(this.netCalories()));

                this.hasExerciseData = ko.computed(() => this.exerciseCalories() > 0);
                this.hasFoodData = ko.computed(() => this.foodCalories() > 0);
                this.hasAnyData = ko.computed(() => this.hasExerciseData() || this.hasFoodData());

                // Specifics
                this.exerciseEntries = ko.observableArray([]);

                this.breakfast = {
                    totalCalories: ko.observable(0),
                    totalCaloriesFormatted: ko.observable(calorieFormatter.format(0)),
                    foods: ko.observableArray([]),
                };
                
                this.lunch = {
                    totalCalories: ko.observable(0),
                    totalCaloriesFormatted: ko.observable(calorieFormatter.format(0)),
                    foods: ko.observableArray([]),
                };

                this.dinner = {
                    totalCalories: ko.observable(0),
                    totalCaloriesFormatted: ko.observable(calorieFormatter.format(0)),
                    foods: ko.observableArray([]),
                };

                this.snack = {
                    totalCalories: ko.observable(0),
                    totalCaloriesFormatted: ko.observable(calorieFormatter.format(0)),
                    foods: ko.observableArray([]),
                };

                this.addNewFoodEntry = {
                    // properties to add new entry
                    meal: ko.observable(''),
                    numServings: ko.observable(1),
                    timeOfDay: ko.observable(''),
                    foodId: ko.observable(null),
                    newFood: {
                        name: ko.observable(''), // string, required
                        brand: ko.observable(null), // string, optional
                        barcode: ko.observable(null), // string (though probably all numeric), optional
                        servingSize: ko.observable(0), // number, required
                        servingSizeUnit: ko.observable(''), // string, required
                        calories: ko.observable(0), // number, required
                        // other nutrition facts are optional
                        // for now, just doing the more common ones, though the model supports the whole gamut
                        totalFatGrams: ko.observable(null), // number, optional
                        saturatedFatGrams: ko.observable(null), // number, optional

                    },
                    // properties to handle search existing food
                    search: {
                        mode: ko.observable('Name'), // Name or Barcode
                        query: ko.observable(''),
                        isFetching: ko.observable(false),
                        hasNoResults: ko.observable(false),
                        results: ko.observableArray([]),
                    },
                };
            }

            let foodDiaryViewModel = new FoodDiaryViewModel();

            function fetchFoodDiaryData() {
                mainContentContainer.style.display = 'none';
                loadingSpinner.style.display = 'flex';

                fetch(`/api/food-diary?date=${pageDate}&tz=${userTimeZone}`, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    }
                })
                    .then(async (response) => {
                        console.log(`Exercise Tracking Analytics: Food Diary Data Fetch API Call Response Status: ${response.status} ${response.statusText}`);
                        const jsonResult = await response.json();
                        console.log('Exercise Tracking Analytics: Food Diary Data Fetch API Call Response JSON Data:', jsonResult);

                        if (response.ok) {
                            foodDiaryViewModel.exerciseCalories(jsonResult.exerciseCalories);
                            foodDiaryViewModel.foodCalories(jsonResult.foodCalories);
                            foodDiaryViewModel.netCalories(jsonResult.netCalories);

                            if (jsonResult.exercise.length) {
                                jsonResult.exercise.forEach((item) => {
                                    const updatedItem = {
                                        ...item,
                                        formattedLocalStartTime: luxon
                                            .DateTime
                                            .fromISO(item.startDateUtc, { zone: 'UTC' })
                                            .setZone(userTimeZone)
                                            .toLocaleString({ timeStyle: 'short' }),
                                        formattedDistance: distanceFormatter.format(item.distance[measurementSystem].amount),
                                        formattedCalories: calorieFormatter.format(item.calories),
                                    }

                                    foodDiaryViewModel.exerciseEntries.push(updatedItem);
                                });
                            }

                            if (jsonResult.meals.length) {
                                jsonResult.meals.forEach((meal) => {
                                    const foodDiaryViewModelMeal = foodDiaryViewModel[`${meal.meal.toLowerCase()}`];
                                    foodDiaryViewModelMeal.totalCalories(meal.totalCalories);
                                    foodDiaryViewModelMeal.totalCaloriesFormatted(calorieFormatter.format(meal.totalCalories));

                                    meal.foods.forEach((food) => {
                                        const updatedFood = {
                                            ...food,
                                            timeOfDayFormatted: luxon.DateTime.local().startOf('day').plus(luxon.Duration.fromISOTime(food.timeOfDay)).toLocaleString({ timeStyle: 'short' }),
                                            caloriesFormatted: calorieFormatter.format(food.calories),
                                        };

                                        foodDiaryViewModelMeal.foods.push(updatedFood);
                                    });
                                });
                            }
                        } else {
                            // handle an error
                        }
                    })
                    .finally(() => {
                        loadingSpinner.style.display = 'none';
                        mainContentContainer.style.display = 'block';
                    });
            }

            function searchFoods() {
                console.log('Search Mode:', foodDiaryViewModel.addNewFoodEntry.search.mode());
                console.log('Search Term:', foodDiaryViewModel.addNewFoodEntry.search.query());
                foodDiaryViewModel.addNewFoodEntry.search.isFetching(true);
                searchFoodsLoadingSpinner.style.display = 'flex';

                fetch(`/api/master-foods?${ foodDiaryViewModel.addNewFoodEntry.search.mode() === "Barcode" ? "barcode" : "query"}=${encodeURIComponent(foodDiaryViewModel.addNewFoodEntry.search.query())}`, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    }
                })
                    .then(async (response) => {
                        console.log(`Exercise Tracking Analytics: Search Foods API Call Response Status: ${response.status} ${response.statusText}`);
                        const jsonResult = await response.json();
                        console.log('Exercise Tracking Analytics: Search Foods API Call Response JSON Data:', jsonResult);

                        if (response.ok) {
                            if (jsonResult.length) {
                                jsonResult.forEach((result) => {
                                    const updatedResult = {
                                        ...result,
                                        caloriesFormatted: calorieFormatter.format(result.calories),
                                    };

                                    foodDiaryViewModel.addNewFoodEntry.search.results.push(updatedResult);
                                });
                            } else {
                                foodDiaryViewModel.addNewFoodEntry.search.hasNoResults(true);
                            }
                        } else {
                            // handle error
                        }
                    })
                    .finally(() => {
                        foodDiaryViewModel.addNewFoodEntry.search.isFetching(false);
                        searchFoodsLoadingSpinner.style.display = 'none';
                    });
            }

            // Activity Sync Modal
            const activitySyncModal = new StravaActivitiesSyncModal(fetchFoodDiaryData);

            // Add Food Modal
            const addFoodModal = new bootstrap.Modal(document.getElementById('food_diary_page--add_food_modal'));

            // Handle Add Food Modal and Save Button
            const addFoodButton = document.getElementById('food_diary_page--add_food_button');
            const searchFoodsButton = document.getElementById('food_diary_page--add_food_modal--search_button');
            const searchFoodsInput = document.getElementById('food_diary_page--add_food_modal_search_input');
            const syncActivitiesButton = document.getElementById('food_diary_page--sync-activities_button');
            const saveNewFoodButton = document.getElementById('food_diary_page--add_food_modal_save_button');

            syncActivitiesButton.addEventListener('click', (e) => {
                e.preventDefault();
                activitySyncModal.open();
            });

            addFoodButton.addEventListener('click', (e) => {
                addFoodModal.show();
            });

            searchFoodsButton.addEventListener('click', (e) => {
                e.preventDefault();
                searchFoods();
            });

            searchFoodsInput.addEventListener('keyup', (e) => {
                if (e.key === 'Enter' && !/^\s*$/.test(foodDiaryViewModel.addNewFoodEntry.search.query())) {
                    searchFoods();
                }
            });

            saveNewFoodButton.addEventListener('click', (e) => {
                console.log('Save it!');
                saveNewFoodButton.blur();
                addFoodModal.hide();

                // TODO: Save new food
                
                fetchFoodDiaryData(); // move this to the callback after we've saved
            });

            // Bind Knockout
            ko.applyBindings(foodDiaryViewModel);

            // Fetch the food diary data
            fetchFoodDiaryData();
        })();
    </script>
}
